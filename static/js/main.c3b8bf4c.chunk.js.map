{"version":3,"sources":["calendarInfo.js","assets/waxSeal.png","assets/baroqueFloral.png","Header.js","assets/arrow.png","assets/eyeOfHorus.jpg","assets/wingedBeing.png","Calendar.js","assets/illustrations/ancient.jpg","assets/illustrations/medieval.jpg","assets/illustrations/renaissance.jpg","assets/illustrations/modern.jpg","assets/illustrations/current.jpg","EventDisplay.js","Footer.js","assets/hieroglyphs.jpg","App.js","reportWebVitals.js","index.js"],"names":["months","daysInAWeek","Header","date","month","getMonth","day","getDate","src","baroqueFloral","alt","className","htmlFor","type","name","id","defaultChecked","waxSeal","Calendar","state","today","Date","calendarDate","eventNav","choiceMade","isChecked","savedDates","monthCalendar","year","getFullYear","numOfDaysInMonth","weekdayOfFirstDay","getDay","maxNumOfDays","this","getMaxNumberOfDays","nextDay","filledCalendar","i","push","stringDate","toString","checkedDay","window","innerWidth","charAt","parseInt","event","chosenDay","target","value","calendarMonth","calendarYear","chosenDate","setState","preventDefault","props","onDatePick","fillCalendar","change","innerHeight","newCalendarDate","changeDate","onClick","onEventChange","wingedBeing","eyeOfHorus","changeMonth","arrow","index","onSubmit","handleSubmit","onChange","getUserChosenDate","map","displayDayInAWeek","entry","calendarEntry","checkToday","checkChosenDay","checked","toggleCalendarDisplay","renderCalendarIcon","renderCalendarNav","renderCalendarDisplay","Component","EventDisplay","events","text","checkedText","length","slice","checkText","eraInfo","imageSrc","altText","ancient","medieval","renaissance","modern","current","getEra","imageUrl","historicalYear","renderEvent","convertYear","Footer","cat","icon","faCat","App","proxyUrl","aDateIsPicked","eventIndex","favourites","picked","newEventIndex","axios","url","method","responseType","then","response","data","Events","catch","err","console","log","apiCall","setUserChosenDate","getNewEvent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b8bf4c.chunk.js","sourcesContent":["const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nconst daysInAWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\nexport { months, daysInAWeek };","export default __webpack_public_path__ + \"static/media/waxSeal.d43581de.png\";","export default __webpack_public_path__ + \"static/media/baroqueFloral.d507c18a.png\";","import { months } from './calendarInfo';\nimport waxSeal from './assets/waxSeal.png';\nimport baroqueFloral from './assets/baroqueFloral.png';\n\nconst renderInformationTab = () => {\n    return (\n        <div className=\"information\">\n            <div className=\"infoImageContainer\"></div>\n            <div className=\"about\">\n                <h3>About</h3>\n                <p>Choose a date and discover what happened on the same day throughout history.</p> \n            </div>\n            <div className=\"navigation\">\n                <h3>Navigation</h3>\n                <p><span>previous</span><span>event</span><span></span></p>\n                <p><span>open</span><span>calendar</span><span></span></p>\n                <p><span>next</span><span>event</span><span></span></p>\n            </div>\n        </div>\n    )\n}\n\nconst renderIcon = () => {\n    return (\n        <div className=\"icons\">\n            <label htmlFor=\"moreInformation\" className=\"srOnly\">more information</label>\n            <input type=\"checkbox\" name=\"moreInformation\" id=\"moreInformation\" defaultChecked={true}/>\n            {\n                renderInformationTab()\n            }\n            <img src={waxSeal} alt=\"more information\" className=\"informationIcon\" />\n            <p className=\"informationSymbol\">i</p>\n        </div>\n    )\n}\n\nconst Header = ( { date } ) => {\n    const month = months[date.getMonth()];\n    const day = date.getDate();\n    return (\n        <header>\n            <img src={baroqueFloral} alt=\"Baroque Floral Motif\" className=\"firstPiece\"/>\n            <img src={baroqueFloral} alt=\"Baroque Floral Motif\" className=\"secondPiece\"/>\n            <h3>{ month } { day }</h3>\n            <h1>In History</h1>\n            <div className=\"headerImageContainer\"></div>\n            {\n                renderIcon()\n            }\n        </header> \n    )\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/arrow.ccd9f4d0.png\";","export default __webpack_public_path__ + \"static/media/eyeOfHorus.da01216a.jpg\";","export default __webpack_public_path__ + \"static/media/wingedBeing.2a6a3e5e.png\";","import { Component } from 'react';\nimport { months, daysInAWeek } from './calendarInfo';\nimport arrow from './assets/arrow.png';\nimport eyeOfHorus from './assets/eyeOfHorus.jpg';\nimport wingedBeing from './assets/wingedBeing.png';\n\nclass Calendar extends Component {\n    constructor() {\n        super();\n        this.state = {\n            today: new Date(),\n            calendarDate: new Date(),\n            eventNav: 0,\n            choiceMade: false,\n            isChecked: false,\n            savedDates: [],\n            monthCalendar: []\n        }\n    }\n    // fill the calendar with the seed (input) being the current day's date\n    fillCalendar(date) {\n        // Get current year and month\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        // Get how many days current month has; year is an input to account for leap years\n        const numOfDaysInMonth = new Date(year, month + 1, 0).getDate();\n        // Get first day of the month and its weekday\n        const firstDay = new Date(year, month, 1);\n        const weekdayOfFirstDay = firstDay.getDay();\n        // maxNumOfDays indicates how many weeks (including all blank entries) to display on the calendar\n        const maxNumOfDays = this.getMaxNumberOfDays(weekdayOfFirstDay, numOfDaysInMonth);\n        // Fill the calendar starting from first entry\n        let nextDay = 1;\n        let filledCalendar = [];\n        for (let i = 0; i < maxNumOfDays; i++) {\n            if (i < weekdayOfFirstDay || i >= weekdayOfFirstDay + numOfDaysInMonth) {\n                // blank entries for before first day and after last day in the month\n                filledCalendar.push('');\n            } else {\n                // date entries\n                const stringDate = this.toString(nextDay);\n                filledCalendar.push(stringDate);\n                nextDay++;\n            }\n        }\n        return filledCalendar;\n    }\n    // Convert single-digit dates into 2-digit string format\n    toString(day) {\n        if (day < 10) {\n            day = '0' + day;\n        } else {\n            day = '' + day;\n        }\n        return day;\n    }\n    // Determine the maximum number of entries for the monthly calendar\n    getMaxNumberOfDays(weekdayOfFirstDay, numOfDaysInMonth) {\n        let maxNumOfDays = 35; // Default is a 5-week display\n        if (weekdayOfFirstDay + numOfDaysInMonth > 35) {\n            maxNumOfDays = 42; // 6-week display\n        } else if (weekdayOfFirstDay + numOfDaysInMonth === 28) {\n            maxNumOfDays = 28 // 4-week display for a normal year with February 1st on a Sunday\n        }\n        return maxNumOfDays;\n    }\n    // Display the names of the days in a week; shorten the names for narrow screens\n    displayDayInAWeek(day) {\n        let checkedDay = day;\n        if (window.innerWidth < 1500) {\n            checkedDay = day.charAt(0);\n        }\n        return (<li key={day}>{checkedDay}</li>)\n    }\n    // Return true if the day on the calendar display is the current date; the purpose is to highlight it\n    checkToday(date, day) {\n        return ( date.getFullYear() === this.state.today.getFullYear() && \n                 date.getMonth() === this.state.today.getMonth() && \n                 parseInt(day) === this.state.today.getDate() )\n    }\n    // Check if the input day is the user's selected date; the purpose is to hightlight it\n    checkChosenDay(day) {\n        if (this.state.calendarDate !== this.state.today) {\n            return (parseInt(day) === this.state.calendarDate.getDate());\n        } else {\n            return false;\n        }\n    } \n    // Update the state of the component when the user selects a date\n    getUserChosenDate(event) {\n        const chosenDay = event.target.value;\n        if (chosenDay) {\n            const calendarMonth = this.state.calendarDate.getMonth();\n            const calendarYear = this.state.calendarDate.getFullYear();\n            // Pass chosenDate to App.js Component to make a new api call and update Header.js Component\n            const chosenDate = new Date(calendarYear, calendarMonth, chosenDay);\n            this.setState({\n                calendarDate: chosenDate,\n                choiceMade: true\n            });\n        }\n    }\n    // Handle form submit and pass user's chosen date to App.js Component\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.choiceMade) {\n            this.setState({\n                isChecked: !this.state.isChecked\n            })\n            // Pass boolean variable dateSelected to App.js Component to start a new api call and reset eventIndex \n            const dateSelected = true;\n            this.props.onDatePick(this.state.calendarDate, dateSelected);\n        }\n    }\n    // Callback function to return to the current month and toggle the calendar display\n    toggleCalendarDisplay() {\n        this.setState({\n            calendarDate: this.state.today,\n            monthCalendar: this.fillCalendar(this.state.today),\n            choiceMade: false,\n            isChecked: !this.state.isChecked\n        });\n    }\n    // Callback function that allows the user to navigate the calendar\n    changeMonth(calendarYear, calendarMonth, change) {\n        if (window.innerHeight > 500) {\n            calendarMonth += change;\n            if (calendarMonth > 11) {\n                calendarMonth = 0;\n                calendarYear++;\n            } else if (calendarMonth < 0) {\n                calendarMonth = 11;\n                calendarYear--;\n            }\n            const newCalendarDate = new Date(calendarYear, calendarMonth);\n            this.setState({\n                calendarDate: newCalendarDate,\n                monthCalendar: this.fillCalendar(newCalendarDate)\n            });\n        } else {\n            this.changeDate(calendarYear, calendarMonth, change);\n        }\n    }\n    // Allow user to navigate the calendar on a short viewport\n    changeDate(calendarYear, calendarMonth, change) {\n        const numOfDaysInMonth = new Date(calendarYear, calendarMonth + 1, 0).getDate();\n        let chosenDay = this.state.calendarDate.getDate();\n        chosenDay += change;\n        if (chosenDay > numOfDaysInMonth) {\n            chosenDay = 1;\n            calendarMonth++;\n            if (calendarMonth > 11) {\n                calendarMonth = 0;\n                calendarYear++;\n            }\n        } else if (chosenDay < 1) {\n            calendarMonth--;\n            chosenDay = new Date(calendarYear, calendarMonth + 1, 0).getDate();\n            if (calendarMonth < 0) {\n                calendarMonth = 11;\n                calendarYear--;\n            }\n        }\n        const newCalendarDate = new Date(calendarYear, calendarMonth, chosenDay);\n        const dateSelected = true;\n        this.setState({\n            calendarDate: newCalendarDate,\n            monthCalendar: this.fillCalendar(newCalendarDate)\n        });\n        this.props.onDatePick(newCalendarDate, dateSelected);\n    }\n    // Render the calendar icon and event nav icons\n    renderCalendarIcon() {\n        return (\n            <div className=\"calendarIcon\">\n                <button className=\"previousEvent\" onClick={() => this.props.onEventChange(-1)} >\n                    <img src={wingedBeing} alt=\"previous event\" />\n                </button>\n                <div className=\"icon\">\n                    <img src={eyeOfHorus} alt=\"select a date\" />\n                </div>\n                <button className=\"nextEvent\" onClick={() => this.props.onEventChange(1)} >\n                    <img src={wingedBeing} alt=\"next event\" />\n                </button>\n            </div>\n        )\n    }\n    // Render the calendar nav\n    renderCalendarNav(calendarYear, calendarMonth) {\n        return (\n            <div className=\"calendarNav hidden\">\n                <button className=\"leftArrow\" onClick={() => this.changeMonth(calendarYear, calendarMonth, -1)}>\n                    <img src={arrow} alt=\"previous month\" />\n                </button>\n                <h3>{months[calendarMonth] + ' ' + calendarYear}</h3>\n                <button className=\"rightArrow\" onClick={() => this.changeMonth(calendarYear, calendarMonth, 1)}>\n                    <img src={arrow} alt=\"previous month\" />\n                </button>\n            </div>\n        )\n    }\n    // To render the calendar entries on screen; callback function parameter to record user's date pick\n    calendarEntry(day, index, today) {\n        return (\n            <div key={index} className=\"dayEntry\">\n                <label htmlFor={index} className={`dayInMonth ${today}`}>\n                    <span>{day.charAt(0)}</span>\n                    <span>{day.charAt(1)}</span>    \n                </label>\n                {\n                    day \n                    ? <input type=\"radio\" name=\"day\" value={day} id={index}/>\n                    : null\n                }\n            </div>\n        )\n    }\n    // Redner the calendar display\n    renderCalendarDisplay(calendarDate) {\n        return(\n            <form \n                className=\"calendarDisplay hidden\"\n                onSubmit={(event) => this.handleSubmit(event)}\n                onChange={(event) => this.getUserChosenDate(event)}\n            >\n                {\n                    daysInAWeek.map((day) => {\n                        return this.displayDayInAWeek(day);\n                    })\n                }\n                {\n                    this.state.monthCalendar.map((day, index) => {\n                        let entry = this.calendarEntry(day, index, '');\n                        if (day === '') {\n                            entry = this.calendarEntry(day, index, '');\n                        } else if (this.checkToday(calendarDate, day)) {\n                            entry = this.calendarEntry(day, index, 'today');\n                        } else if (this.checkChosenDay(day)) {\n                            entry = this.calendarEntry(day, index, 'selected');\n                        }\n                        return entry;\n                    })\n                }\n                <button className=\"submitButton\">Select</button>\n            </form>\n        )\n    }\n    \n    componentDidMount() {\n        this.setState({\n            monthCalendar: this.fillCalendar(this.state.today)\n        });\n    }\n    \n    render() {\n        const calendarDate = this.state.calendarDate;\n        const calendarYear = calendarDate.getFullYear();\n        const calendarMonth = calendarDate.getMonth();\n        return (\n            <div className=\"calendar\">\n                {/* Input checkbox to toggle calendar display */}\n                <label htmlFor=\"calendar\" className=\"srOnly\">Choose a day</label>\n                <input type=\"checkbox\" name=\"calendar\" id=\"calendar\"\n                    checked={this.state.isChecked}\n                    onChange={() => this.toggleCalendarDisplay()}\n                />\n                {\n                    this.renderCalendarIcon()\n                }\n                <section className=\"mainDisplay hidden\">\n                    {/* Background image */}\n                    {/* <img src={parchment} alt=\"parchment background\" className=\"parchment hidden\" /> */}\n                    {\n                        this.renderCalendarNav(calendarYear, calendarMonth)\n                    }\n                    {\n                        this.renderCalendarDisplay(calendarDate)\n                    }\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Calendar;","export default __webpack_public_path__ + \"static/media/ancient.ad8761cc.jpg\";","export default __webpack_public_path__ + \"static/media/medieval.35076ef2.jpg\";","export default __webpack_public_path__ + \"static/media/renaissance.4cebef42.jpg\";","export default __webpack_public_path__ + \"static/media/modern.8b15503a.jpg\";","export default __webpack_public_path__ + \"static/media/current.f430e457.jpg\";","import ancient from './assets/illustrations/ancient.jpg';\nimport medieval from './assets/illustrations/medieval.jpg';\nimport renaissance from './assets/illustrations/renaissance.jpg';\nimport modern from './assets/illustrations/modern.jpg';\nimport current from './assets/illustrations/current.jpg';\n\nconst convertYear = (year) => {\n    if (year > 0) {\n        year = year + ' CE';\n    } else if (year < 0) {\n        year = year + ' BCE';\n    } else {\n        year = 'Year 0';\n    }\n    return year;\n}\n\nconst getEra = (year) => {\n    let imageSrc = '';\n    let altText = '';\n    if (year < 500) {\n        imageSrc = ancient;\n        altText = 'ancient';\n    } else if (year < 1500) {\n        imageSrc = medieval;\n        altText = 'medieval';\n    } else if (year < 1700) {\n        imageSrc = renaissance;\n        altText = 'renaissance';\n    } else if (year < 2000) {\n        imageSrc = modern;\n        altText = 'modern';\n    } else {\n        imageSrc = current;\n        altText = 'current';\n    }\n    return [imageSrc, altText];\n}\n\nconst checkText = (text)=>  {\n    let checkedText = text;\n    if (text.charAt(text.length - 1) === ']') {\n        checkedText = text.slice(0, text.length - 3);\n    }\n    return checkedText;\n}\n\nconst renderEvent = (index, imageUrl, altText, historicalYear, checkedText) => {\n    return(\n        <div key={index} className=\"event\">\n            <img src={imageUrl} alt={altText} />\n            <div className=\"eventDescription\">\n                <h3>{historicalYear}</h3>\n                <p>{checkedText}</p>\n            </div>\n        </div>\n    );\n}\n\nconst EventDisplay = (props) => {\n    return (\n        props.events.map( (event, index) => {\n            const { text, year } = event;\n            const checkedText = checkText(text);\n            const eraInfo = getEra(year);\n            const imageUrl = eraInfo[0];\n            const altText = `Illustration picture for ${ eraInfo[1] } period of history`;\n            const historicalYear = convertYear(year);\n            return renderEvent(index, imageUrl, altText, historicalYear, checkedText);\n        })\n    );\n}\n\nexport default EventDisplay;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCat } from '@fortawesome/free-solid-svg-icons';\nimport hieroglyphs from './assets/hieroglyphs.jpg';\n\nconst Footer = () => {\n    const cat = <FontAwesomeIcon icon={faCat} />;\n    return(\n        <footer>\n            <div className=\"image\"></div>\n            <p><span>{cat}</span> Created at Juno College {cat}</p>\n        </footer>\n    )\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/hieroglyphs.875c6356.jpg\";","import { Component } from 'react';\nimport axios from 'axios';\nimport Header from './Header';\nimport Calendar from './Calendar';\nimport EventDisplay from './EventDisplay.js';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.proxyUrl = `https://cors-anywhere.herokuapp.com/`;\n    this.state = {\n      today: new Date(),\n      chosenDate: new Date(),\n      aDateIsPicked: false,\n      eventIndex: 1,\n      events: [],\n      favourites: []\n    }\n  }\n\n  setUserChosenDate(date, picked) {\n    this.setState({\n      chosenDate: date,\n      aDateIsPicked: picked\n    });\n  }\n\n  getNewEvent(change) {\n    let newEventIndex = this.state.eventIndex + change;\n    if (newEventIndex < 1) {\n      newEventIndex = 1;\n    } else if (newEventIndex > this.state.events.length) {\n      newEventIndex = this.state.events.length;\n    }\n    this.setState({\n      eventIndex: newEventIndex\n    });\n  }\n\n  apiCall() {\n    axios({\n      url: `${this.proxyUrl}http://history.muffinlabs.com/date/${this.state.chosenDate.getMonth() + 1}/${this.state.chosenDate.getDate()}`,\n      method: `GET`,\n      responseType: `json`\n    }).then((response) => {\n      this.setState({\n        events: response.data.data.Events\n      });\n    }).catch( err => console.log(err) );\n  }\n\n  componentDidMount() {\n    this.apiCall();\n  }\n\n  componentDidUpdate() {\n    if (this.state.aDateIsPicked) {\n      this.apiCall();\n      this.setState({\n        aDateIsPicked: false,\n        eventIndex: 1\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header date={ this.state.chosenDate }/>\n\n        <section className=\"eventDisplay\">\n          <div className=\"wrapper\">\n            <EventDisplay \n              events={this.state.events.slice(this.state.eventIndex - 1, this.state.eventIndex)}  \n            />\n          </div> {/* closing wrapper */}\n        </section> {/* closing eventDisplay */}\n\n        <Calendar \n          onDatePick={ (date, picked) => this.setUserChosenDate(date, picked) }\n          onEventChange={ (change) => this.getNewEvent(change) }\n        />\n        <Footer />\n      </div> /* closing App */\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}